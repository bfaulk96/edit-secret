#!/usr/bin/env python3

import argparse
import subprocess
import json
import os
from base64 import standard_b64decode, standard_b64encode
import shutil

# Pare arguments passed in via command line
parser = argparse.ArgumentParser(description='Process some options')
parser.add_argument('--namespace', '-n', dest="namespace", help='specify a Kubernetes namespace')
parser.add_argument('name', type=str, help='the secret name')
args = parser.parse_args()

# Set the important variables
namespace = args.namespace
secret_name = args.name

# Use kubectl, the Kubernetes CLI, to get the specified secret
result = subprocess.run(['kubectl', 'get', 'secret', '-n', namespace, secret_name, '-o', 'json'],
                        stdout=subprocess.PIPE)

# Load the JSON file, capture the data attribute we care about
res = json.loads(result.stdout.decode('utf-8'))
data = res.get("data", {})
keys = [key for key in data]

os.makedirs(".__temp__/", exist_ok=True)
# # Create a temporary file for each
# for key in keys:
#     filename = ".__temp__/__temp__%s" % key
#     os.makedirs(os.path.dirname(filename), exist_ok=True)
#     with open(filename, 'w') as f:
#         f.write(standard_b64decode(data[key]).decode("utf-8"))

EXIT_EDIT = False
while not EXIT_EDIT:
    i = input("Please choose what to edit: \n" +
              "".join(["%d) %s\n" % (index + 1, key) for index, key in enumerate(keys)]) +
              "%d) DONE\n" % (len(keys) + 1))

    if not i.isdigit() or int(i) < 1:
        print("Please enter a digit!\n")
        continue
    else:
        i = int(i)
        if i == (len(keys) + 1):
            EXIT_EDIT = True
            continue
        try:
            name = keys[i - 1]
        except IndexError:
            print("Please select a valid number!\n")
            continue

        filename = ".__temp__/__temp__%s" % name
        with open(filename, 'w') as f:
            f.write(standard_b64decode(data[name]).decode("utf-8"))

        a = subprocess.run(['vim', filename])

        with open(".__temp__/__temp__%s" % name, 'r') as f:
            contents = f.read().rstrip()
            res["data"][name] = standard_b64encode(bytes(contents, 'utf-8')).decode("utf-8")


with open(".__temp__/__temp__.json", "w") as w:
    w.write(json.dumps(res))

subprocess.run(["kubectl", "apply", "-f", ".__temp__/__temp__.json"])

shutil.rmtree('.__temp__')
